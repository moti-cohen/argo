apiVersion: ec2.services.k8s.aws/v1alpha1
kind: SecurityGroup
metadata:
  name: {{ .Values.securityGroupRDS.name }}  # This should resolve correctly
  namespace: default
spec:
  name: {{ .Values.securityGroupRDS.name }}  # This should resolve correctly
  description: {{ .Values.securityGroupRDS.description | quote }}  # Ensure the description is quoted correctly
  vpcID: {{ .Values.vpcID | quote }}  # Quote the VPC ID as well
  ingressRules:
    {{- range .Values.securityGroupRDS.ingressRules }}
    - fromPort: {{ .fromPort }}
      toPort: {{ .toPort }}
      ipProtocol: {{ .ipProtocol | quote }}
      userIDGroupPairs:
        - groupID: {{ .groupID | quote }}
          description: {{ .description | quote }}
    {{- end }}
  egressRules:
    - fromPort: 0
      toPort: 0
      ipProtocol: tcp
      ipRanges:
        - cidrIP: "0.0.0.0/0"
          description: "Allow all outbound traffic"


---

apiVersion: rds.services.k8s.aws/v1alpha1
kind: DBInstance
metadata:
  name: {{ .Values.rds.dbInstanceIdentifier }}
  namespace: default
spec:
  dbInstanceIdentifier: {{ .Values.rds.dbInstanceIdentifier | quote }}
  dbInstanceClass: {{ .Values.rds.dbInstanceClass | quote }}
  engine: {{ .Values.rds.engine | quote }}
  masterUsername: {{ .Values.rds.username | quote }}
  masterUserPassword:
    namespace: default
    name: rds
    key: password
  allocatedStorage: {{ .Values.rds.allocatedStorage }}
  backupRetentionPeriod: {{ .Values.rds.backupRetentionPeriod }}
  publiclyAccessible: false
  vpcSecurityGroupIDs:
    - {{ .Values.rds.id }}
  dbSubnetGroupName: {{ .Values.rds.subnetGroupName | quote }}
